<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1543031949640" stop="1543031991817">
  <name>test_login</name>
  <labels/>
  <test-cases>
    <test-case start="1543031949640" status="failed" stop="1543031991817">
      <description>失败测试用例</description>
      <name>Test_Login.test_login_fal[test_login_012-     -159357lil-\u4e0d\u80fd\u4e3a\u7a7a-\u767b\u5f55\u540d\u4e0d\u80fd\u4e3a\u7a7a]</name>
      <failure>
        <message>TimeoutException: Message: 
</message>
        <stack-trace>self = &lt;test_login.Test_Login object at 0x10df6e588&gt;, i = 'test_login_012', phone = '     ', passwd = '159357lil'
get_toast = '不能为空', expect_data = '登录名不能为空'

    @pytest.mark.parametrize("i, phone, passwd, get_toast, expect_data", get_login_data().get("fal"))
    def test_login_fal(self, i, phone, passwd, get_toast, expect_data):
        """失败测试用例"""
        # 点击我
        self.page_obj.get_home_page_obj().click_my_btn()
        # 点击已有账号去登录
        self.page_obj.get_sign_page_obj().click_exits_account()
        # 执行登陆操作
        self.page_obj.get_login_page_obj().login(phone, passwd)
        try:
            # 获取toast
&gt;           toast_message = self.page_obj.get_login_page_obj().get_toast(get_toast)

Scripts/test_login.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Page.login_page.Login_Page object at 0x10e0d3d68&gt;, mes = '不能为空'

    def get_toast(self, mes):
        """获取toast消息"""
        toast_mes_xpath = "//*[contains(@text,'{}')]".format(mes)
        # toast获取提示消息
&gt;       toast_message = self.search_element((By.XPATH, toast_mes_xpath), timeout=5, poll_frequency=0.5).text

Base/Base.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Page.login_page.Login_Page object at 0x10e0d3d68&gt;, loc = ('xpath', "//*[contains(@text,'不能为空')]"), timeout = 5
poll_frequency = 0.5

    def search_element(self, loc, timeout=10, poll_frequency=1.0):
        """
        定位单个元素
        :param loc: 元祖 (By.ID,ID属性值) (By.CLASS_NAME,CLASS属性值) (By.XPATH,XPATH属性值)
        :param timeout: 搜索元素超时时间
        :param poll_frequency: 搜索间隔
        :return: 定位对象
        """
&gt;       return WebDriverWait(self.driver, timeout, poll_frequency).until(lambda x: x.find_element(*loc))

Base/Base.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="47abe755-d2e5-42e9-b358-5c6820c06d7f")&gt;
method = &lt;function Base.search_element.&lt;locals&gt;.&lt;lambda&gt; at 0x10e0d76a8&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException

During handling of the above exception, another exception occurred:

self = &lt;test_login.Test_Login object at 0x10df6e588&gt;, i = 'test_login_012', phone = '     ', passwd = '159357lil'
get_toast = '不能为空', expect_data = '登录名不能为空'

    @pytest.mark.parametrize("i, phone, passwd, get_toast, expect_data", get_login_data().get("fal"))
    def test_login_fal(self, i, phone, passwd, get_toast, expect_data):
        """失败测试用例"""
        # 点击我
        self.page_obj.get_home_page_obj().click_my_btn()
        # 点击已有账号去登录
        self.page_obj.get_sign_page_obj().click_exits_account()
        # 执行登陆操作
        self.page_obj.get_login_page_obj().login(phone, passwd)
        try:
            # 获取toast
            toast_message = self.page_obj.get_login_page_obj().get_toast(get_toast)
            # 登录按钮是否存在
            if_login = self.page_obj.get_login_page_obj().if_login_btn()
            # 关闭页面
            self.page_obj.get_login_page_obj().close_login_page()
            # 断言
            assert toast_message == expect_data and if_login
        except TimeoutException:
            #执行退出操作
            # 点击设置
            self.page_obj.get_person_page().click_setting_btn()
            # 点击退出
&gt;           self.page_obj.get_setting_page_obj().log_out()

Scripts/test_login.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Page/setting_page.py:16: in log_out
    self.click_element(Page.logout_btn_id)
Base/Base.py:36: in click_element
    self.search_element(loc, timeout, poll_frequency).click()
Base/Base.py:16: in search_element
    return WebDriverWait(self.driver, timeout, poll_frequency).until(lambda x: x.find_element(*loc))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="47abe755-d2e5-42e9-b358-5c6820c06d7f")&gt;
method = &lt;function Base.search_element.&lt;locals&gt;.&lt;lambda&gt; at 0x10e0ef158&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="3527-MainThread"/>
        <label name="host" value="deMacBook-Pro.local"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
